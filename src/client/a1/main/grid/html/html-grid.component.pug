.grid([ngClass]="gridClass$ | async", [class.starting]="transport.starting", (mouseleave)="player.unselect()")
  .strip-container
    .strip(*ngFor="let key of grid.keys")
      .beat(*ngFor="let pulses of grid.pulsesByBeat; let beat = index")
        .pulse(*ngFor="let pulseIndex of pulsesFor(beat); let pulse = index",
            [ngClass]="{active: noteActive(pulseIndex), cursor: player.cursor === pulseIndex}")
          .actual.note([ngClass]="noteClass(pulses)", *ngIf="player.value(key, pulseIndex)")
  .top-fx.overlay
    .strip(*ngFor="let key of grid.keys")
      .beat(*ngFor="let pulses of grid.pulsesByBeat; let beat = index")
        .pulse(*ngFor="let pulseIndex of pulsesFor(beat); let pulse = index",
            [ngClass]="{active: noteActive(pulseIndex), cursor: player.cursor === pulseIndex}")
          .fx.note([ngClass]="noteClass(pulses)", *ngIf="player.value(key, pulseIndex)")
  .position(*ngIf="stage.isPlayback", [style.left]="(transport.progress() * 100) + '%'")
  .faces
    particle-fx([type]="particleType", [count]="particleCount$ | async")
    .face(*ngFor="let pulses of grid.pulsesByBeat; let beat = index",
        [ngClass]="{active: transport.active(beat), cursor: player.beat === beat}")
      .eyes([ngClass]="{left: player.beat + 1 === beat, right: player.beat - 1 === beat, " +
          "wrong: stage.beatWrong === beat, very: stage.goalCount > 2}")
    //counter-ball {{transport.count()}}
  .overlay
    .strip(*ngFor="let key of grid.keys")
      .beat(*ngFor="let pulses of grid.pulsesByBeat; let beat = index")
        .pulse(*ngFor="let pulseIndex of pulsesFor(beat); let pulse = index",
            [ngClass]="{active: noteActive(pulseIndex), cursor: player.cursor === pulseIndex}",
            (mouseenter)="!transport.starting && player.select(key, pulseIndex)")
          .controls
            .note([ngClass]="controlNoteClass(key, pulseIndex, pulses)",
                (click)="onNote(key, pulseIndex)")
  .glass.overlay(*ngIf="stage.isVictory")
    .points(*ngIf="stage.isVictory", [@bounceIn]="")
      .char(*ngFor="let char of pointChars()") {{char}}
