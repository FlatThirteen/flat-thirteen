mixin setting(type)
  .setting(*ngIf="progress.powerLevels['" + type + "'] as options")
    .options
      .option(*ngFor="let level of options",
          [@settingOption]="showSetting === '" + type + "' || powers.level('" +
              type + "') === level ? 'show' : 'hidden'",
          [ngClass]="{active: powers.level('" + type + "') === level, " +
              "dim: powers.level('" + type + "') < level}",
          (mousedown)="!lesson.inProgress && onSetting('" + type + "', level); $event.stopPropagation()")
        block

.main.lesson-container([class.fade]="lesson.inStage")
  .spacer
  .result(*ngFor="let result of progress.results; let i = index")
    .completed.stage(*ngFor="let points of result.points") {{ points }}
  .current
    .stage.on-hover(*ngFor="let stage of lesson.stages; let i = index", (click)="onStage(i)",
        [ngClass]="{completed: lesson.pointsFor(i), weenie: isStageWeenie(i)}")
      | {{ lesson.pointsFor(i) }}
    .next.stage.on-hover(*ngIf="lesson.isCompleted && !progress.powerUps.length", (click)="onNext()",
        [class.weenie]="isNextWeenie()", [@next]="") &rarr;
    .power-container
      power-icon(*ngFor="let power of progress.powerUps", [type]="power",
          (click)="onPower(power)", [@powerUp]="")
.options-panel.bottom-bar(*ngIf="progress.allowedPowers.any",
    [class.disabled]="lesson.inProgress", [@slideBottom]="")
  +setting('strip')
    strip-icon([level]="level")
  +setting('auto')
    auto-icon([level]="level")
.main.surface-container(*ngIf="lesson.inStage", [@fadeInOut]="")
  bouncing-ball([showBall$]="showBouncingBall$", [counter]="counter$ | async")
  .surface(*ngFor="let surface of lesson.surfaces", [@surface]="lesson.stage")
    .controls
      goal-icon.goal.button((click)="onGoal()", [@goal]="stage.sceneState", [mode]="goalMode",
          [ngClass]="{weenie: isGoalWeenie(), active: goalBeat() }")
      minus-fx([show$]="stage.goalMinusFx$")
      .spacer
      .play([class.active]="stage.isCountPlay && transport.active()",
          [@play]="stage.sceneState", [@notes]="player.noteCount")
        play-icon.button((click)="isGoalWeenie() || onPlayback()",
            [playNotes]="player.noteCount", [goalNotes]="stage.goalNotes",
            [autoPlay]="powers.autoPlay",
            [ngClass]="{weenie: isPlaybackWeenie(), disabled: playDisabled()}")
        .counter(*ngIf="stage.nextScene === 'playback'", (click)="onStandby()") {{ transport.count() }}
      minus-fx([show$]="stage.playMinusFx$")
    html-grid(*ngIf="isGrid(surface)", [grid]="surface", [class.weenie]="isGridWeenie()")
    .controls
      .repeat.button(*ngIf="powers.autoLoop && !stage.isPlayback",
          [ngClass]="{active: repeatBeat()}",
          (click)="onStopRepeat()", [@repeat]="stage.nextScene")
      .spacer
  .top-bar.back((click)="onStage()", *ngIf="lesson.inStage", [@slideTop]="") &larr;
.points(*ngIf="lesson.isCompleted && progress.points", [@slideTop]="") {{progress.points}}
stage-panel.bottom-bar(*ngIf="lesson.inStage", [@slideBottom]="")

