backing-fx([phrase]="phrase", [fixedNotes]="fixedNotes", [show]="showFx", [showCounts]="true")

.container
  .left
    .controls
      play-icon.play.button((click)="onPlay()")
        .counter(*ngIf="transport.started") {{ transport.count }}
      .beats-input
        input.beats(type="text", [(ngModel)]="beatsPerMeasure", (ngModelChange)="onBpm($event)", placeholder="# beats")
      .beats-input([ngClass]="{invalid: !transport.isValidBpm(tempo), " +
          "dim: transport.isValidBpm(tempo) && tempo !== transport.bpm}")
        input(type="number", [(ngModel)]="tempo", (ngModelChange)="onTempo($event)", placeholder="tempo")

    .performance([ngClass]="{invalid: !transport.isValidLatencyHint(latencyHint)," +
        "dim: transport.isValidLatencyHint(latencyHint) && latencyHint !== transport.latencyHint}")
      input(type="text", [(ngModel)]="latencyHint", (ngModelChange)="onLatencyHint($event)",
          (focus)="showSuggestions = true", (blur)="hideSuggestions()",
          placeholder="latency hint")
      .suggestions(*ngIf="showSuggestions")
        .suggestion((click)="onLatencyHint(0.2)") 0.2
        .suggestion((click)="onLatencyHint('fastest')") fastest
        .suggestion((click)="onLatencyHint('interactive')") interactive
        .suggestion((click)="onLatencyHint('balanced')") balanced
        .suggestion((click)="onLatencyHint('playback')") playback
  .content([class.solo]="anySolo")
    .track(*ngFor="let track of tracks; let i = index", [ngClass]="{solo: track.solo, mute: track.mute}")
      input(type="checkbox", [(ngModel)]="track.solo", (ngModelChange)="parseNotes()")
      input(type="checkbox", [(ngModel)]="track.mute", (ngModelChange)="parseNotes()")
      input.type(type="text", [(ngModel)]="track.type", (ngModelChange)="parseNotes()")
      input.notes(type="text", [(ngModel)]="track.notes", (ngModelChange)="parseNotes()")
      .close.mini-button((click)="onRemove(i)") x
    .add.mini-button((click)="onAdd()") +

  .footer
    .line(*ngFor="let beat of debugPhrase")
      .debug([ngClass]="{selected: selected === beat, now: isNow(beat)}",
          (click)="onBeat(beat)") {{ beat }}

  .right
    h3 More
    div(*ngFor="let collection of more")
      h3 {{ collection[0] }}
      .mini-button(*ngFor="let phrase of collection[1]",
          (click)="onAdd($event, collection[0].toLowerCase())")
        | {{ phrase }}

  .transport
    .latency(*ngIf="transport.latencyHistogram.length") {{ transport.latencyHistogram.join(',') }}
    .started(*ngIf="transport.started")
      | {{ transport.measure }} : {{ transport.count }} / {{ transport.countBeats }}
    .starting(*ngIf="transport.starting") ...
    .paused(*ngIf="transport.paused") {{ transport.numBeats }} beats
    .elapsed(*ngIf="transport.startTime") ({{ transport.elapsedTime() }}s)

.fx-controls
  .enable((click)="showFx = !showFx", [ngClass]="showFx ? 'on' : showFx === false ? 'off' : ''")
